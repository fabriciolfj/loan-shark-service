server:
  shutdown: graceful
  tomcat:
    connection-timeout: 5s
    keep-alive-timeout: 15s
    accept-count: 100
    threads:
      max: 200
      min-spare: 5


springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs

spring:
  application:
    name: loan-shark
  data:
    redis:
      url: rediss://localhost:6379
  lifecycle:
    timeout-per-shutdown-phase: 15s
  datasource:
    username: root
    password: root
    url: jdbc:postgresql://localhost:5432/postgres
    hikari:
      maximum-pool-size: 15
      connection-timeout: 2000
      idle-timeout: 1000
  flyway:
    locations:
      - db/migration
  jpa:
    generate-ddl: false
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  kafka:
    bootstrap-servers:
      - localhost:29092
      - localhost:29093
      - localhost:29094
    consumer:
      enable-auto-commit: false
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.LongDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        isolation.level: read_committed
    producer:
      key-serializer: org.apache.kafka.common.serialization.LongSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      transaction-id-prefix: tx-
  output.ansi.enabled: ALWAYS

management:
  endpoints:
    web:
      exposure:
        include: health, metrics, prometheus, flyway, heapdump, info
  endpoint:
    prometheus:
      enabled: true
    health:
      show-components: always
      show-details: always
      probes:
        enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

logging:
  pattern.console: "%clr(%d{HH:mm:ss.SSS}){blue} %clr(---){faint} %clr([%15.15t]){yellow} %clr(:){red} %clr(%m){faint}%n"

api:
  common:
    version: 1.0.0
    title: Loan Shark API
    description: Create loan suggestions
    contact:
      email: fabricio.jacob@outlook.com
  loan-controller:
    description: Create suggestion loan
    summary: Create loan
  response-codes:
    badRequest: Input data invalids
    creation: Request creation suggestion loan success
